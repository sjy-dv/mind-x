// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatasetManagerClient is the client API for DatasetManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetManagerClient interface {
	List(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (DatasetManager_ListClient, error)
	Get(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*Dataset, error)
	Create(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*Dataset, error)
	Delete(ctx context.Context, in *UUIDRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	GetDatasetSize(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*DatasetSize, error)
}

type datasetManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetManagerClient(cc grpc.ClientConnInterface) DatasetManagerClient {
	return &datasetManagerClient{cc}
}

func (c *datasetManagerClient) List(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (DatasetManager_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &DatasetManager_ServiceDesc.Streams[0], "/mindxv.v0.DatasetManager/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &datasetManagerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatasetManager_ListClient interface {
	Recv() (*Dataset, error)
	grpc.ClientStream
}

type datasetManagerListClient struct {
	grpc.ClientStream
}

func (x *datasetManagerListClient) Recv() (*Dataset, error) {
	m := new(Dataset)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *datasetManagerClient) Get(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DatasetManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetManagerClient) Create(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DatasetManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetManagerClient) Delete(ctx context.Context, in *UUIDRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DatasetManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetManagerClient) GetDatasetSize(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*DatasetSize, error) {
	out := new(DatasetSize)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DatasetManager/GetDatasetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetManagerServer is the server API for DatasetManager service.
// All implementations should embed UnimplementedDatasetManagerServer
// for forward compatibility
type DatasetManagerServer interface {
	List(*ListDatasetsRequest, DatasetManager_ListServer) error
	Get(context.Context, *GetDatasetRequest) (*Dataset, error)
	Create(context.Context, *Dataset) (*Dataset, error)
	Delete(context.Context, *UUIDRequest) (*EmptyMessage, error)
	GetDatasetSize(context.Context, *GetDatasetRequest) (*DatasetSize, error)
}

// UnimplementedDatasetManagerServer should be embedded to have forward compatible implementations.
type UnimplementedDatasetManagerServer struct {
}

func (UnimplementedDatasetManagerServer) List(*ListDatasetsRequest, DatasetManager_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDatasetManagerServer) Get(context.Context, *GetDatasetRequest) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDatasetManagerServer) Create(context.Context, *Dataset) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDatasetManagerServer) Delete(context.Context, *UUIDRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDatasetManagerServer) GetDatasetSize(context.Context, *GetDatasetRequest) (*DatasetSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetSize not implemented")
}

// UnsafeDatasetManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetManagerServer will
// result in compilation errors.
type UnsafeDatasetManagerServer interface {
	mustEmbedUnimplementedDatasetManagerServer()
}

func RegisterDatasetManagerServer(s grpc.ServiceRegistrar, srv DatasetManagerServer) {
	s.RegisterService(&DatasetManager_ServiceDesc, srv)
}

func _DatasetManager_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDatasetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatasetManagerServer).List(m, &datasetManagerListServer{stream})
}

type DatasetManager_ListServer interface {
	Send(*Dataset) error
	grpc.ServerStream
}

type datasetManagerListServer struct {
	grpc.ServerStream
}

func (x *datasetManagerListServer) Send(m *Dataset) error {
	return x.ServerStream.SendMsg(m)
}

func _DatasetManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DatasetManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetManagerServer).Get(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DatasetManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetManagerServer).Create(ctx, req.(*Dataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DatasetManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetManagerServer).Delete(ctx, req.(*UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetManager_GetDatasetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetManagerServer).GetDatasetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DatasetManager/GetDatasetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetManagerServer).GetDatasetSize(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetManager_ServiceDesc is the grpc.ServiceDesc for DatasetManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mindxv.v0.DatasetManager",
	HandlerType: (*DatasetManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DatasetManager_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DatasetManager_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DatasetManager_Delete_Handler,
		},
		{
			MethodName: "GetDatasetSize",
			Handler:    _DatasetManager_GetDatasetSize_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _DatasetManager_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v0/dataset.proto",
}

// DataManagerClient is the client API for DataManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataManagerClient interface {
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	BatchInsert(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	BatchUpdate(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	BatchRemove(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	PartitionBatchInsert(ctx context.Context, in *PartitionBatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	PartitionBatchUpdate(ctx context.Context, in *PartitionBatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	PartitionBatchRemove(ctx context.Context, in *PartitionBatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	PartitionInfo(ctx context.Context, in *PartitionInfoRequest, opts ...grpc.CallOption) (*PartitionInfoResponse, error)
}

type dataManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataManagerClient(cc grpc.ClientConnInterface) DataManagerClient {
	return &dataManagerClient{cc}
}

func (c *dataManagerClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DataManager/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DataManager/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DataManager/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) BatchInsert(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DataManager/BatchInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) BatchUpdate(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DataManager/BatchUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) BatchRemove(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DataManager/BatchRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) PartitionBatchInsert(ctx context.Context, in *PartitionBatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DataManager/PartitionBatchInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) PartitionBatchUpdate(ctx context.Context, in *PartitionBatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DataManager/PartitionBatchUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) PartitionBatchRemove(ctx context.Context, in *PartitionBatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DataManager/PartitionBatchRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagerClient) PartitionInfo(ctx context.Context, in *PartitionInfoRequest, opts ...grpc.CallOption) (*PartitionInfoResponse, error) {
	out := new(PartitionInfoResponse)
	err := c.cc.Invoke(ctx, "/mindxv.v0.DataManager/PartitionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataManagerServer is the server API for DataManager service.
// All implementations should embed UnimplementedDataManagerServer
// for forward compatibility
type DataManagerServer interface {
	Insert(context.Context, *InsertRequest) (*EmptyMessage, error)
	Update(context.Context, *UpdateRequest) (*EmptyMessage, error)
	Remove(context.Context, *RemoveRequest) (*EmptyMessage, error)
	BatchInsert(context.Context, *BatchRequest) (*BatchResponse, error)
	BatchUpdate(context.Context, *BatchRequest) (*BatchResponse, error)
	BatchRemove(context.Context, *BatchRequest) (*BatchResponse, error)
	PartitionBatchInsert(context.Context, *PartitionBatchRequest) (*BatchResponse, error)
	PartitionBatchUpdate(context.Context, *PartitionBatchRequest) (*BatchResponse, error)
	PartitionBatchRemove(context.Context, *PartitionBatchRequest) (*BatchResponse, error)
	PartitionInfo(context.Context, *PartitionInfoRequest) (*PartitionInfoResponse, error)
}

// UnimplementedDataManagerServer should be embedded to have forward compatible implementations.
type UnimplementedDataManagerServer struct {
}

func (UnimplementedDataManagerServer) Insert(context.Context, *InsertRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedDataManagerServer) Update(context.Context, *UpdateRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDataManagerServer) Remove(context.Context, *RemoveRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedDataManagerServer) BatchInsert(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsert not implemented")
}
func (UnimplementedDataManagerServer) BatchUpdate(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdate not implemented")
}
func (UnimplementedDataManagerServer) BatchRemove(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRemove not implemented")
}
func (UnimplementedDataManagerServer) PartitionBatchInsert(context.Context, *PartitionBatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionBatchInsert not implemented")
}
func (UnimplementedDataManagerServer) PartitionBatchUpdate(context.Context, *PartitionBatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionBatchUpdate not implemented")
}
func (UnimplementedDataManagerServer) PartitionBatchRemove(context.Context, *PartitionBatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionBatchRemove not implemented")
}
func (UnimplementedDataManagerServer) PartitionInfo(context.Context, *PartitionInfoRequest) (*PartitionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionInfo not implemented")
}

// UnsafeDataManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataManagerServer will
// result in compilation errors.
type UnsafeDataManagerServer interface {
	mustEmbedUnimplementedDataManagerServer()
}

func RegisterDataManagerServer(s grpc.ServiceRegistrar, srv DataManagerServer) {
	s.RegisterService(&DataManager_ServiceDesc, srv)
}

func _DataManager_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DataManager/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DataManager/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DataManager/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_BatchInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).BatchInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DataManager/BatchInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).BatchInsert(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_BatchUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).BatchUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DataManager/BatchUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).BatchUpdate(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_BatchRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).BatchRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DataManager/BatchRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).BatchRemove(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_PartitionBatchInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).PartitionBatchInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DataManager/PartitionBatchInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).PartitionBatchInsert(ctx, req.(*PartitionBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_PartitionBatchUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).PartitionBatchUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DataManager/PartitionBatchUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).PartitionBatchUpdate(ctx, req.(*PartitionBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_PartitionBatchRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).PartitionBatchRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DataManager/PartitionBatchRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).PartitionBatchRemove(ctx, req.(*PartitionBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManager_PartitionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagerServer).PartitionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mindxv.v0.DataManager/PartitionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagerServer).PartitionInfo(ctx, req.(*PartitionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataManager_ServiceDesc is the grpc.ServiceDesc for DataManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mindxv.v0.DataManager",
	HandlerType: (*DataManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _DataManager_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DataManager_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _DataManager_Remove_Handler,
		},
		{
			MethodName: "BatchInsert",
			Handler:    _DataManager_BatchInsert_Handler,
		},
		{
			MethodName: "BatchUpdate",
			Handler:    _DataManager_BatchUpdate_Handler,
		},
		{
			MethodName: "BatchRemove",
			Handler:    _DataManager_BatchRemove_Handler,
		},
		{
			MethodName: "PartitionBatchInsert",
			Handler:    _DataManager_PartitionBatchInsert_Handler,
		},
		{
			MethodName: "PartitionBatchUpdate",
			Handler:    _DataManager_PartitionBatchUpdate_Handler,
		},
		{
			MethodName: "PartitionBatchRemove",
			Handler:    _DataManager_PartitionBatchRemove_Handler,
		},
		{
			MethodName: "PartitionInfo",
			Handler:    _DataManager_PartitionInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v0/dataset.proto",
}
