// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Search_SearchClient, error)
	SearchPartitions(ctx context.Context, in *SearchPartitionsRequest, opts ...grpc.CallOption) (Search_SearchPartitionsClient, error)
}

type searchClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchClient(cc grpc.ClientConnInterface) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Search_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Search_ServiceDesc.Streams[0], "/mindxv.v0.Search/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Search_SearchClient interface {
	Recv() (*SearchResultItem, error)
	grpc.ClientStream
}

type searchSearchClient struct {
	grpc.ClientStream
}

func (x *searchSearchClient) Recv() (*SearchResultItem, error) {
	m := new(SearchResultItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *searchClient) SearchPartitions(ctx context.Context, in *SearchPartitionsRequest, opts ...grpc.CallOption) (Search_SearchPartitionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Search_ServiceDesc.Streams[1], "/mindxv.v0.Search/SearchPartitions", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchSearchPartitionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Search_SearchPartitionsClient interface {
	Recv() (*SearchResultItem, error)
	grpc.ClientStream
}

type searchSearchPartitionsClient struct {
	grpc.ClientStream
}

func (x *searchSearchPartitionsClient) Recv() (*SearchResultItem, error) {
	m := new(SearchResultItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearchServer is the server API for Search service.
// All implementations should embed UnimplementedSearchServer
// for forward compatibility
type SearchServer interface {
	Search(*SearchRequest, Search_SearchServer) error
	SearchPartitions(*SearchPartitionsRequest, Search_SearchPartitionsServer) error
}

// UnimplementedSearchServer should be embedded to have forward compatible implementations.
type UnimplementedSearchServer struct {
}

func (UnimplementedSearchServer) Search(*SearchRequest, Search_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearchServer) SearchPartitions(*SearchPartitionsRequest, Search_SearchPartitionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchPartitions not implemented")
}

// UnsafeSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServer will
// result in compilation errors.
type UnsafeSearchServer interface {
	mustEmbedUnimplementedSearchServer()
}

func RegisterSearchServer(s grpc.ServiceRegistrar, srv SearchServer) {
	s.RegisterService(&Search_ServiceDesc, srv)
}

func _Search_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServer).Search(m, &searchSearchServer{stream})
}

type Search_SearchServer interface {
	Send(*SearchResultItem) error
	grpc.ServerStream
}

type searchSearchServer struct {
	grpc.ServerStream
}

func (x *searchSearchServer) Send(m *SearchResultItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Search_SearchPartitions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchPartitionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServer).SearchPartitions(m, &searchSearchPartitionsServer{stream})
}

type Search_SearchPartitionsServer interface {
	Send(*SearchResultItem) error
	grpc.ServerStream
}

type searchSearchPartitionsServer struct {
	grpc.ServerStream
}

func (x *searchSearchPartitionsServer) Send(m *SearchResultItem) error {
	return x.ServerStream.SendMsg(m)
}

// Search_ServiceDesc is the grpc.ServiceDesc for Search service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Search_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mindxv.v0.Search",
	HandlerType: (*SearchServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _Search_Search_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchPartitions",
			Handler:       _Search_SearchPartitions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v0/search.proto",
}
