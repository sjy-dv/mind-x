// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: v0/dataset.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Space int32

const (
	Space_Euclidean Space = 0
	Space_Manhattan Space = 1
	Space_Cosine    Space = 2
)

// Enum value maps for Space.
var (
	Space_name = map[int32]string{
		0: "Euclidean",
		1: "Manhattan",
		2: "Cosine",
	}
	Space_value = map[string]int32{
		"Euclidean": 0,
		"Manhattan": 1,
		"Cosine":    2,
	}
)

func (x Space) Enum() *Space {
	p := new(Space)
	*p = x
	return p
}

func (x Space) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Space) Descriptor() protoreflect.EnumDescriptor {
	return file_v0_dataset_proto_enumTypes[0].Descriptor()
}

func (Space) Type() protoreflect.EnumType {
	return &file_v0_dataset_proto_enumTypes[0]
}

func (x Space) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Space.Descriptor instead.
func (Space) EnumDescriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{0}
}

type DatasetManagerChangeType int32

const (
	DatasetManagerChangeType_DatasetManagerCreateDataset        DatasetManagerChangeType = 0
	DatasetManagerChangeType_DatasetManagerDeleteDataset        DatasetManagerChangeType = 1
	DatasetManagerChangeType_DatasetManagerUpdatePartitionNodes DatasetManagerChangeType = 2
)

// Enum value maps for DatasetManagerChangeType.
var (
	DatasetManagerChangeType_name = map[int32]string{
		0: "DatasetManagerCreateDataset",
		1: "DatasetManagerDeleteDataset",
		2: "DatasetManagerUpdatePartitionNodes",
	}
	DatasetManagerChangeType_value = map[string]int32{
		"DatasetManagerCreateDataset":        0,
		"DatasetManagerDeleteDataset":        1,
		"DatasetManagerUpdatePartitionNodes": 2,
	}
)

func (x DatasetManagerChangeType) Enum() *DatasetManagerChangeType {
	p := new(DatasetManagerChangeType)
	*p = x
	return p
}

func (x DatasetManagerChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetManagerChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_v0_dataset_proto_enumTypes[1].Descriptor()
}

func (DatasetManagerChangeType) Type() protoreflect.EnumType {
	return &file_v0_dataset_proto_enumTypes[1]
}

func (x DatasetManagerChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetManagerChangeType.Descriptor instead.
func (DatasetManagerChangeType) EnumDescriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{1}
}

type DatasetPartitionNodesChangeType int32

const (
	DatasetPartitionNodesChangeType_DatasetPartitionNodesChangeAddNode    DatasetPartitionNodesChangeType = 0
	DatasetPartitionNodesChangeType_DatasetPartitionNodesChangeRemoveNode DatasetPartitionNodesChangeType = 1
)

// Enum value maps for DatasetPartitionNodesChangeType.
var (
	DatasetPartitionNodesChangeType_name = map[int32]string{
		0: "DatasetPartitionNodesChangeAddNode",
		1: "DatasetPartitionNodesChangeRemoveNode",
	}
	DatasetPartitionNodesChangeType_value = map[string]int32{
		"DatasetPartitionNodesChangeAddNode":    0,
		"DatasetPartitionNodesChangeRemoveNode": 1,
	}
)

func (x DatasetPartitionNodesChangeType) Enum() *DatasetPartitionNodesChangeType {
	p := new(DatasetPartitionNodesChangeType)
	*p = x
	return p
}

func (x DatasetPartitionNodesChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetPartitionNodesChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_v0_dataset_proto_enumTypes[2].Descriptor()
}

func (DatasetPartitionNodesChangeType) Type() protoreflect.EnumType {
	return &file_v0_dataset_proto_enumTypes[2]
}

func (x DatasetPartitionNodesChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetPartitionNodesChangeType.Descriptor instead.
func (DatasetPartitionNodesChangeType) EnumDescriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{2}
}

type PartitionChangeType int32

const (
	PartitionChangeType_PartitionChangeInsertValue      PartitionChangeType = 0
	PartitionChangeType_PartitionChangeUpdateValue      PartitionChangeType = 1
	PartitionChangeType_PartitionChangeDeleteValue      PartitionChangeType = 2
	PartitionChangeType_PartitionChangeBatchInsertValue PartitionChangeType = 3
	PartitionChangeType_PartitionChangeBatchUpdateValue PartitionChangeType = 4
	PartitionChangeType_PartitionChangeBatchDeleteValue PartitionChangeType = 5
)

// Enum value maps for PartitionChangeType.
var (
	PartitionChangeType_name = map[int32]string{
		0: "PartitionChangeInsertValue",
		1: "PartitionChangeUpdateValue",
		2: "PartitionChangeDeleteValue",
		3: "PartitionChangeBatchInsertValue",
		4: "PartitionChangeBatchUpdateValue",
		5: "PartitionChangeBatchDeleteValue",
	}
	PartitionChangeType_value = map[string]int32{
		"PartitionChangeInsertValue":      0,
		"PartitionChangeUpdateValue":      1,
		"PartitionChangeDeleteValue":      2,
		"PartitionChangeBatchInsertValue": 3,
		"PartitionChangeBatchUpdateValue": 4,
		"PartitionChangeBatchDeleteValue": 5,
	}
)

func (x PartitionChangeType) Enum() *PartitionChangeType {
	p := new(PartitionChangeType)
	*p = x
	return p
}

func (x PartitionChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_v0_dataset_proto_enumTypes[3].Descriptor()
}

func (PartitionChangeType) Type() protoreflect.EnumType {
	return &file_v0_dataset_proto_enumTypes[3]
}

func (x PartitionChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartitionChangeType.Descriptor instead.
func (PartitionChangeType) EnumDescriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{3}
}

type ListDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithSize bool `protobuf:"varint,1,opt,name=with_size,json=withSize,proto3" json:"with_size,omitempty"`
}

func (x *ListDatasetsRequest) Reset() {
	*x = ListDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasetsRequest) ProtoMessage() {}

func (x *ListDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasetsRequest.ProtoReflect.Descriptor instead.
func (*ListDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{0}
}

func (x *ListDatasetsRequest) GetWithSize() bool {
	if x != nil {
		return x.WithSize
	}
	return false
}

type GetDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId []byte `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	WithSize  bool   `protobuf:"varint,2,opt,name=with_size,json=withSize,proto3" json:"with_size,omitempty"`
}

func (x *GetDatasetRequest) Reset() {
	*x = GetDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetRequest) ProtoMessage() {}

func (x *GetDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetRequest) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{1}
}

func (x *GetDatasetRequest) GetDatasetId() []byte {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

func (x *GetDatasetRequest) GetWithSize() bool {
	if x != nil {
		return x.WithSize
	}
	return false
}

type InsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId []byte            `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Id        []byte            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Value     []float32         `protobuf:"fixed32,3,rep,packed,name=value,proto3" json:"value,omitempty"`
	Metadata  map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InsertRequest) Reset() {
	*x = InsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRequest) ProtoMessage() {}

func (x *InsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRequest.ProtoReflect.Descriptor instead.
func (*InsertRequest) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{2}
}

func (x *InsertRequest) GetDatasetId() []byte {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

func (x *InsertRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InsertRequest) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InsertRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId []byte            `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Id        []byte            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Value     []float32         `protobuf:"fixed32,3,rep,packed,name=value,proto3" json:"value,omitempty"`
	Metadata  map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateRequest) GetDatasetId() []byte {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

func (x *UpdateRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateRequest) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId []byte `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Id        []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveRequest) Reset() {
	*x = RemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRequest) ProtoMessage() {}

func (x *RemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRequest.ProtoReflect.Descriptor instead.
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveRequest) GetDatasetId() []byte {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

func (x *RemoveRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type BatchItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       []byte            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value    []float32         `protobuf:"fixed32,2,rep,packed,name=value,proto3" json:"value,omitempty"`
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Level    int32             `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *BatchItem) Reset() {
	*x = BatchItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchItem) ProtoMessage() {}

func (x *BatchItem) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchItem.ProtoReflect.Descriptor instead.
func (*BatchItem) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{5}
}

func (x *BatchItem) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BatchItem) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BatchItem) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BatchItem) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type BatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId []byte       `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Items     []*BatchItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *BatchRequest) Reset() {
	*x = BatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRequest) ProtoMessage() {}

func (x *BatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRequest.ProtoReflect.Descriptor instead.
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{6}
}

func (x *BatchRequest) GetDatasetId() []byte {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

func (x *BatchRequest) GetItems() []*BatchItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type PartitionBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId   []byte       `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	PartitionId []byte       `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Items       []*BatchItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PartitionBatchRequest) Reset() {
	*x = PartitionBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionBatchRequest) ProtoMessage() {}

func (x *PartitionBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionBatchRequest.ProtoReflect.Descriptor instead.
func (*PartitionBatchRequest) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{7}
}

func (x *PartitionBatchRequest) GetDatasetId() []byte {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

func (x *PartitionBatchRequest) GetPartitionId() []byte {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

func (x *PartitionBatchRequest) GetItems() []*BatchItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type BatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors map[string]string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchResponse) Reset() {
	*x = BatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResponse) ProtoMessage() {}

func (x *BatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResponse.ProtoReflect.Descriptor instead.
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{8}
}

func (x *BatchResponse) GetErrors() map[string]string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type PartitionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId   []byte `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	PartitionId []byte `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (x *PartitionInfoRequest) Reset() {
	*x = PartitionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionInfoRequest) ProtoMessage() {}

func (x *PartitionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionInfoRequest.ProtoReflect.Descriptor instead.
func (*PartitionInfoRequest) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{9}
}

func (x *PartitionInfoRequest) GetDatasetId() []byte {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

func (x *PartitionInfoRequest) GetPartitionId() []byte {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type PartitionInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len       uint64 `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
	BytesSize uint64 `protobuf:"varint,2,opt,name=bytes_size,json=bytesSize,proto3" json:"bytes_size,omitempty"`
}

func (x *PartitionInfoResponse) Reset() {
	*x = PartitionInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionInfoResponse) ProtoMessage() {}

func (x *PartitionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionInfoResponse.ProtoReflect.Descriptor instead.
func (*PartitionInfoResponse) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{10}
}

func (x *PartitionInfoResponse) GetLen() uint64 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *PartitionInfoResponse) GetBytesSize() uint64 {
	if x != nil {
		return x.BytesSize
	}
	return 0
}

type Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                []byte       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Dimension         uint32       `protobuf:"varint,2,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Space             Space        `protobuf:"varint,3,opt,name=space,proto3,enum=mindxv.v0.Space" json:"space,omitempty"`
	PartitionCount    uint32       `protobuf:"varint,4,opt,name=partition_count,json=partitionCount,proto3" json:"partition_count,omitempty"`
	ReplicationFactor uint32       `protobuf:"varint,5,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	Partitions        []*Partition `protobuf:"bytes,6,rep,name=partitions,proto3" json:"partitions,omitempty"`
	Size              uint64       `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{11}
}

func (x *Dataset) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Dataset) GetDimension() uint32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *Dataset) GetSpace() Space {
	if x != nil {
		return x.Space
	}
	return Space_Euclidean
}

func (x *Dataset) GetPartitionCount() uint32 {
	if x != nil {
		return x.PartitionCount
	}
	return 0
}

func (x *Dataset) GetReplicationFactor() uint32 {
	if x != nil {
		return x.ReplicationFactor
	}
	return 0
}

func (x *Dataset) GetPartitions() []*Partition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *Dataset) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type DatasetSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len       uint64 `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
	BytesSize uint64 `protobuf:"varint,2,opt,name=bytes_size,json=bytesSize,proto3" json:"bytes_size,omitempty"`
}

func (x *DatasetSize) Reset() {
	*x = DatasetSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetSize) ProtoMessage() {}

func (x *DatasetSize) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetSize.ProtoReflect.Descriptor instead.
func (*DatasetSize) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{12}
}

func (x *DatasetSize) GetLen() uint64 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *DatasetSize) GetBytesSize() uint64 {
	if x != nil {
		return x.BytesSize
	}
	return 0
}

type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeIds []uint64 `protobuf:"varint,2,rep,packed,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
}

func (x *Partition) Reset() {
	*x = Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{13}
}

func (x *Partition) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Partition) GetNodeIds() []uint64 {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

type DatasetManagerChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           DatasetManagerChangeType `protobuf:"varint,1,opt,name=type,proto3,enum=mindxv.v0.DatasetManagerChangeType" json:"type,omitempty"`
	NotificationId []byte                   `protobuf:"bytes,2,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
	Data           []byte                   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DatasetManagerChange) Reset() {
	*x = DatasetManagerChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetManagerChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetManagerChange) ProtoMessage() {}

func (x *DatasetManagerChange) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetManagerChange.ProtoReflect.Descriptor instead.
func (*DatasetManagerChange) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{14}
}

func (x *DatasetManagerChange) GetType() DatasetManagerChangeType {
	if x != nil {
		return x.Type
	}
	return DatasetManagerChangeType_DatasetManagerCreateDataset
}

func (x *DatasetManagerChange) GetNotificationId() []byte {
	if x != nil {
		return x.NotificationId
	}
	return nil
}

func (x *DatasetManagerChange) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DatasetPartitionNodesChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        DatasetPartitionNodesChangeType `protobuf:"varint,1,opt,name=type,proto3,enum=mindxv.v0.DatasetPartitionNodesChangeType" json:"type,omitempty"`
	DatasetId   []byte                          `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	PartitionId []byte                          `protobuf:"bytes,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	NodeId      uint64                          `protobuf:"varint,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *DatasetPartitionNodesChange) Reset() {
	*x = DatasetPartitionNodesChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetPartitionNodesChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetPartitionNodesChange) ProtoMessage() {}

func (x *DatasetPartitionNodesChange) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetPartitionNodesChange.ProtoReflect.Descriptor instead.
func (*DatasetPartitionNodesChange) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{15}
}

func (x *DatasetPartitionNodesChange) GetType() DatasetPartitionNodesChangeType {
	if x != nil {
		return x.Type
	}
	return DatasetPartitionNodesChangeType_DatasetPartitionNodesChangeAddNode
}

func (x *DatasetPartitionNodesChange) GetDatasetId() []byte {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

func (x *DatasetPartitionNodesChange) GetPartitionId() []byte {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

func (x *DatasetPartitionNodesChange) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type PartitionChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           PartitionChangeType `protobuf:"varint,1,opt,name=type,proto3,enum=mindxv.v0.PartitionChangeType" json:"type,omitempty"`
	NotificationId []byte              `protobuf:"bytes,2,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
	Id             []byte              `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Value          []float32           `protobuf:"fixed32,4,rep,packed,name=value,proto3" json:"value,omitempty"`
	Metadata       map[string]string   `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Level          int32               `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	BatchItems     []*BatchItem        `protobuf:"bytes,7,rep,name=batch_items,json=batchItems,proto3" json:"batch_items,omitempty"`
}

func (x *PartitionChange) Reset() {
	*x = PartitionChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionChange) ProtoMessage() {}

func (x *PartitionChange) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionChange.ProtoReflect.Descriptor instead.
func (*PartitionChange) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{16}
}

func (x *PartitionChange) GetType() PartitionChangeType {
	if x != nil {
		return x.Type
	}
	return PartitionChangeType_PartitionChangeInsertValue
}

func (x *PartitionChange) GetNotificationId() []byte {
	if x != nil {
		return x.NotificationId
	}
	return nil
}

func (x *PartitionChange) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PartitionChange) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PartitionChange) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PartitionChange) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PartitionChange) GetBatchItems() []*BatchItem {
	if x != nil {
		return x.BatchItems
	}
	return nil
}

type DatasetManagerSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datasets []*Dataset `protobuf:"bytes,1,rep,name=datasets,proto3" json:"datasets,omitempty"`
}

func (x *DatasetManagerSnapshot) Reset() {
	*x = DatasetManagerSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v0_dataset_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetManagerSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetManagerSnapshot) ProtoMessage() {}

func (x *DatasetManagerSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_v0_dataset_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetManagerSnapshot.ProtoReflect.Descriptor instead.
func (*DatasetManagerSnapshot) Descriptor() ([]byte, []int) {
	return file_v0_dataset_proto_rawDescGZIP(), []int{17}
}

func (x *DatasetManagerSnapshot) GetDatasets() []*Dataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

var File_v0_dataset_proto protoreflect.FileDescriptor

var file_v0_dataset_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x30, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x1a, 0x0d, 0x76,
	0x30, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6e,
	0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3e, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xc4, 0x01, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76,
	0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e,
	0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0d,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x48, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x07, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78,
	0x76, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3e,
	0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x36,
	0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x22, 0xe4, 0x02, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x69, 0x6e, 0x64,
	0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78,
	0x76, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x2e, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2a, 0x31, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x75,
	0x63, 0x6c, 0x69, 0x64, 0x65, 0x61, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x61, 0x6e,
	0x68, 0x61, 0x74, 0x74, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x73, 0x69,
	0x6e, 0x65, 0x10, 0x02, 0x2a, 0x84, 0x01, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x10, 0x02, 0x2a, 0x74, 0x0a, 0x1f, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x22, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x10,
	0x01, 0x2a, 0xe4, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x03, 0x12, 0x23,
	0x0a, 0x1f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x05, 0x32, 0xbc, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x1c, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x6d,
	0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x1a, 0x12, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16,
	0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e,
	0x76, 0x30, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x46, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x32, 0xda, 0x05, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x12, 0x18, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x69,
	0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78,
	0x76, 0x2e, 0x76, 0x30, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3b, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x18, 0x2e, 0x6d, 0x69,
	0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76,
	0x30, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40,
	0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x17, 0x2e,
	0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e,
	0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78,
	0x76, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x12, 0x17, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x69, 0x6e,
	0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x6d,
	0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x14,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e,
	0x76, 0x30, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6a, 0x79, 0x2d, 0x64, 0x76, 0x2f, 0x6d, 0x69, 0x6e, 0x64, 0x2d, 0x78,
	0x2f, 0x6d, 0x69, 0x6e, 0x64, 0x78, 0x2d, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_v0_dataset_proto_rawDescOnce sync.Once
	file_v0_dataset_proto_rawDescData = file_v0_dataset_proto_rawDesc
)

func file_v0_dataset_proto_rawDescGZIP() []byte {
	file_v0_dataset_proto_rawDescOnce.Do(func() {
		file_v0_dataset_proto_rawDescData = protoimpl.X.CompressGZIP(file_v0_dataset_proto_rawDescData)
	})
	return file_v0_dataset_proto_rawDescData
}

var file_v0_dataset_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_v0_dataset_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_v0_dataset_proto_goTypes = []interface{}{
	(Space)(0),                           // 0: mindxv.v0.Space
	(DatasetManagerChangeType)(0),        // 1: mindxv.v0.DatasetManagerChangeType
	(DatasetPartitionNodesChangeType)(0), // 2: mindxv.v0.DatasetPartitionNodesChangeType
	(PartitionChangeType)(0),             // 3: mindxv.v0.PartitionChangeType
	(*ListDatasetsRequest)(nil),          // 4: mindxv.v0.ListDatasetsRequest
	(*GetDatasetRequest)(nil),            // 5: mindxv.v0.GetDatasetRequest
	(*InsertRequest)(nil),                // 6: mindxv.v0.InsertRequest
	(*UpdateRequest)(nil),                // 7: mindxv.v0.UpdateRequest
	(*RemoveRequest)(nil),                // 8: mindxv.v0.RemoveRequest
	(*BatchItem)(nil),                    // 9: mindxv.v0.BatchItem
	(*BatchRequest)(nil),                 // 10: mindxv.v0.BatchRequest
	(*PartitionBatchRequest)(nil),        // 11: mindxv.v0.PartitionBatchRequest
	(*BatchResponse)(nil),                // 12: mindxv.v0.BatchResponse
	(*PartitionInfoRequest)(nil),         // 13: mindxv.v0.PartitionInfoRequest
	(*PartitionInfoResponse)(nil),        // 14: mindxv.v0.PartitionInfoResponse
	(*Dataset)(nil),                      // 15: mindxv.v0.Dataset
	(*DatasetSize)(nil),                  // 16: mindxv.v0.DatasetSize
	(*Partition)(nil),                    // 17: mindxv.v0.Partition
	(*DatasetManagerChange)(nil),         // 18: mindxv.v0.DatasetManagerChange
	(*DatasetPartitionNodesChange)(nil),  // 19: mindxv.v0.DatasetPartitionNodesChange
	(*PartitionChange)(nil),              // 20: mindxv.v0.PartitionChange
	(*DatasetManagerSnapshot)(nil),       // 21: mindxv.v0.DatasetManagerSnapshot
	nil,                                  // 22: mindxv.v0.InsertRequest.MetadataEntry
	nil,                                  // 23: mindxv.v0.UpdateRequest.MetadataEntry
	nil,                                  // 24: mindxv.v0.BatchItem.MetadataEntry
	nil,                                  // 25: mindxv.v0.BatchResponse.ErrorsEntry
	nil,                                  // 26: mindxv.v0.PartitionChange.MetadataEntry
	(*UUIDRequest)(nil),                  // 27: mindxv.v0.UUIDRequest
	(*EmptyMessage)(nil),                 // 28: mindxv.v0.EmptyMessage
}
var file_v0_dataset_proto_depIdxs = []int32{
	22, // 0: mindxv.v0.InsertRequest.metadata:type_name -> mindxv.v0.InsertRequest.MetadataEntry
	23, // 1: mindxv.v0.UpdateRequest.metadata:type_name -> mindxv.v0.UpdateRequest.MetadataEntry
	24, // 2: mindxv.v0.BatchItem.metadata:type_name -> mindxv.v0.BatchItem.MetadataEntry
	9,  // 3: mindxv.v0.BatchRequest.items:type_name -> mindxv.v0.BatchItem
	9,  // 4: mindxv.v0.PartitionBatchRequest.items:type_name -> mindxv.v0.BatchItem
	25, // 5: mindxv.v0.BatchResponse.errors:type_name -> mindxv.v0.BatchResponse.ErrorsEntry
	0,  // 6: mindxv.v0.Dataset.space:type_name -> mindxv.v0.Space
	17, // 7: mindxv.v0.Dataset.partitions:type_name -> mindxv.v0.Partition
	1,  // 8: mindxv.v0.DatasetManagerChange.type:type_name -> mindxv.v0.DatasetManagerChangeType
	2,  // 9: mindxv.v0.DatasetPartitionNodesChange.type:type_name -> mindxv.v0.DatasetPartitionNodesChangeType
	3,  // 10: mindxv.v0.PartitionChange.type:type_name -> mindxv.v0.PartitionChangeType
	26, // 11: mindxv.v0.PartitionChange.metadata:type_name -> mindxv.v0.PartitionChange.MetadataEntry
	9,  // 12: mindxv.v0.PartitionChange.batch_items:type_name -> mindxv.v0.BatchItem
	15, // 13: mindxv.v0.DatasetManagerSnapshot.datasets:type_name -> mindxv.v0.Dataset
	4,  // 14: mindxv.v0.DatasetManager.List:input_type -> mindxv.v0.ListDatasetsRequest
	5,  // 15: mindxv.v0.DatasetManager.Get:input_type -> mindxv.v0.GetDatasetRequest
	15, // 16: mindxv.v0.DatasetManager.Create:input_type -> mindxv.v0.Dataset
	27, // 17: mindxv.v0.DatasetManager.Delete:input_type -> mindxv.v0.UUIDRequest
	5,  // 18: mindxv.v0.DatasetManager.GetDatasetSize:input_type -> mindxv.v0.GetDatasetRequest
	6,  // 19: mindxv.v0.DataManager.Insert:input_type -> mindxv.v0.InsertRequest
	7,  // 20: mindxv.v0.DataManager.Update:input_type -> mindxv.v0.UpdateRequest
	8,  // 21: mindxv.v0.DataManager.Remove:input_type -> mindxv.v0.RemoveRequest
	10, // 22: mindxv.v0.DataManager.BatchInsert:input_type -> mindxv.v0.BatchRequest
	10, // 23: mindxv.v0.DataManager.BatchUpdate:input_type -> mindxv.v0.BatchRequest
	10, // 24: mindxv.v0.DataManager.BatchRemove:input_type -> mindxv.v0.BatchRequest
	11, // 25: mindxv.v0.DataManager.PartitionBatchInsert:input_type -> mindxv.v0.PartitionBatchRequest
	11, // 26: mindxv.v0.DataManager.PartitionBatchUpdate:input_type -> mindxv.v0.PartitionBatchRequest
	11, // 27: mindxv.v0.DataManager.PartitionBatchRemove:input_type -> mindxv.v0.PartitionBatchRequest
	13, // 28: mindxv.v0.DataManager.PartitionInfo:input_type -> mindxv.v0.PartitionInfoRequest
	15, // 29: mindxv.v0.DatasetManager.List:output_type -> mindxv.v0.Dataset
	15, // 30: mindxv.v0.DatasetManager.Get:output_type -> mindxv.v0.Dataset
	15, // 31: mindxv.v0.DatasetManager.Create:output_type -> mindxv.v0.Dataset
	28, // 32: mindxv.v0.DatasetManager.Delete:output_type -> mindxv.v0.EmptyMessage
	16, // 33: mindxv.v0.DatasetManager.GetDatasetSize:output_type -> mindxv.v0.DatasetSize
	28, // 34: mindxv.v0.DataManager.Insert:output_type -> mindxv.v0.EmptyMessage
	28, // 35: mindxv.v0.DataManager.Update:output_type -> mindxv.v0.EmptyMessage
	28, // 36: mindxv.v0.DataManager.Remove:output_type -> mindxv.v0.EmptyMessage
	12, // 37: mindxv.v0.DataManager.BatchInsert:output_type -> mindxv.v0.BatchResponse
	12, // 38: mindxv.v0.DataManager.BatchUpdate:output_type -> mindxv.v0.BatchResponse
	12, // 39: mindxv.v0.DataManager.BatchRemove:output_type -> mindxv.v0.BatchResponse
	12, // 40: mindxv.v0.DataManager.PartitionBatchInsert:output_type -> mindxv.v0.BatchResponse
	12, // 41: mindxv.v0.DataManager.PartitionBatchUpdate:output_type -> mindxv.v0.BatchResponse
	12, // 42: mindxv.v0.DataManager.PartitionBatchRemove:output_type -> mindxv.v0.BatchResponse
	14, // 43: mindxv.v0.DataManager.PartitionInfo:output_type -> mindxv.v0.PartitionInfoResponse
	29, // [29:44] is the sub-list for method output_type
	14, // [14:29] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_v0_dataset_proto_init() }
func file_v0_dataset_proto_init() {
	if File_v0_dataset_proto != nil {
		return
	}
	file_v0_core_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v0_dataset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetManagerChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetPartitionNodesChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v0_dataset_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetManagerSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v0_dataset_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_v0_dataset_proto_goTypes,
		DependencyIndexes: file_v0_dataset_proto_depIdxs,
		EnumInfos:         file_v0_dataset_proto_enumTypes,
		MessageInfos:      file_v0_dataset_proto_msgTypes,
	}.Build()
	File_v0_dataset_proto = out.File
	file_v0_dataset_proto_rawDesc = nil
	file_v0_dataset_proto_goTypes = nil
	file_v0_dataset_proto_depIdxs = nil
}
